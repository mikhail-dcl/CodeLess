using Microsoft.CodeAnalysis;
using System.Collections.Generic;
using System.Text;

namespace CodeLess.Singletons
{
    public class SingletonRegistryTemplate
    {
        private readonly StringBuilder usings = new ();

        private readonly StringBuilder resetMethods = new ();

        private readonly StringBuilder visitedAssemblies = new ();

        private readonly HashSet<string> usingsExpressions = new ();

        internal string BuildSource() =>
            $$"""
              // <auto-generated>
              //     The following assemblies were visited to generate this file:
              {{visitedAssemblies}}
              // </auto-generated>
              #nullable enable
              {{usings}}
              namespace CodeLess.Singletons
              {
                public class SingletonRegistry
                {
                    /// <summary>
                    ///     Resets all singletons registered in the registry.
                    /// </summary>
                    /// <param name="dispose">If true, disposable singletons will be disposed before resetting.</param>
                    public static void Reset(bool dispose = true)
                    {
                       {{resetMethods}}
                    }
                }
              }
              """;

        internal void AppendVisitedAssembly(string assemblyName)
        {
            visitedAssemblies.Append("//     ");
            visitedAssemblies.AppendLine(assemblyName);
        }

        /// <summary>
        /// Appends a using directive for the namespace of the provided type symbol if it is not already present.
        /// </summary>
        internal void AppendUsings(in ITypeSymbol typeInfo)
        {
            // Append the namespace if it is not already present
            if (typeInfo.ContainingNamespace.IsGlobalNamespace) return;

            var @namespace = typeInfo.ContainingNamespace?.ToDisplayString();

            if (@namespace == null) return;

            var usingFromNamespace = $"using {@namespace};";

            if (usingsExpressions.Add(usingFromNamespace))
                usings.AppendLine(usingFromNamespace);
        }

        internal void AppendResetMethod(in ITypeSymbol typeInfo)
        {
            resetMethods.Append(typeInfo.Name);
            resetMethods.AppendLine(".Reset(dispose);");
        }

        internal void Clear()
        {
            visitedAssemblies.Clear();
            usings.Clear();
            resetMethods.Clear();
            usingsExpressions.Clear();
        }
    }
}
